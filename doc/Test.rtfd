pad_init = is always 0x20
preamble_length = data_mem[61]  //useless
cipher = data_mem[64-127] 

// find LFSR_init
cipher_1st_byte(8bits) = data_mem[64]
xor_result(7bits) = ciper_1st_byte[0:6]
LFSR_init(7bits) <= xor_result XOR pad_init

// find the LFSR_ptrn used in encryption
for (int i = 0; i < 9; i ++){ // iterate all 9 possible LFSR_ptrn values
    curr_ptrn = LUT_all_ptrn[i] 
LFSR (7bits) =  LFSR_init (7bits)
msg_pad = pad_init

    for (int j = 0; j < 10; j++){ // check whether match with first 10 bytes preamble
        // DO encryption on 7bits -> crypted_msg
LFSR (7bits) XOR msg_pad (7bits) -> crypt (7bits) 
XOR all 7 bits of crypt -> as parity bit (1 bit)
crypt (7bits) together with parity bit (1 bit) as MSB -> msg_crypt w/ parity 

if msg_crypt w/ parity  != ciper[j + 64] { // means current LFSR_ptrn is wrong
    break
}

//cal next LFSR
AND LFSR (7bits) with LFSR pattern (7bits) curr_ptrn -> result1
XOR all bits of result1 -> LSB bit of next LFSR (as feedback value, 1 bit)
LEFT SHIFT 1 bits of LFSR -> LS result (6bits)
LS result (6bits) together with feedback -> next LFSR (7bits)
LFSR (7bits) <= next LFSR (7bits)        

        
}
If j == 10 { // means curr_ptrn is right pattern
    break
}
}
LFSR_ptrn = LUT_all_ptrn[i - 1] // actually  LFSR_ptrn  = curr_ptrn
LFSR = LFSR_init 

// fill first 10 bytes with 0x20 since no need decryption
for (int i = 0; i < 10; j++){ 
    Data_mem[i] = 0x20

    // to get next LFSR
AND LFSR (7bits) with LFSR_ptrn (7bits) -> result1
XOR all bits of result1 -> LSB bit of next LFSR (as feedback value, 1 bit)
LEFT SHIFT 1 bits of LFSR -> LS result (6bits)
LS result (6bits) together with feedback -> next LFSR (7bits)
LFSR (7bits) <= next LFSR (7bits)    
}

// Use LFSR_ptrn and LFSR_init to reverse calculating to decrypt remaining msg after first 10 bytes
for (int i = 10; i < 64; i++){
LFSR (7bits) XOR  cipher[i + 64][0:6] => msg_pad (7bits)     // decrypt
Data_mem[i] = msg_pad (7bits) with MSB is 0         // store decrypt result

// to get next LFSR
AND LFSR (7bits) with LFSR_ptrn (7bits) -> result1
XOR all bits of result1 -> LSB bit of next LFSR (as feedback value, 1 bit)
LEFT SHIFT 1 bits of LFSR -> LS result (6bits)
LS result (6bits) together with feedback -> next LFSR (7bits)
LFSR (7bits) <= next LFSR (7bits)        
}



