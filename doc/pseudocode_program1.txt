// Read LFSR pattern (7bits) randomly 0~8
mov ax, dx     //moved value in DX to AX
xor dx, dx     //cleared DX
mov cx, 10     //moved 10 dec to CX
div cx ; here dx contains the remainder of the division - from 0 to 9 //divided AX by CX hence we get a remainder within 0-9 Dec which is stored in DX
add dl, '0' ; to ascii from '0' to '9' 
If dl == 9 {
    dl = 8
}
LFSR_ptrn (7bits)  = LUT_all_ptrn[dl] 

// Read LFSR_init (7bits) randomly 1~127
LFSR_init (7bits) = LFSR_ptrn (7bits)  
If LFSR_init (7bits) == 0x00 {
    LFSR_init (7bits) = 0x01
}

pad_init = is always 0x20
preamble_length = data_mem[61] 


LFSR = LFSR_init 

for (int i = 0; i < 64; i++){ 
    if i >= preamble_length:
        if i < preamble_length + 49:
            // Read 1 char (7bits) from data_mem[0~48] as msg_pad (7bits)
            msg_pad (7bits) = data_mem[i - preamble_length][0:6]
    else: 
        msg_pad (7bits) = pad_init 
    //(it actually still operate with 8 bits)
    
    // this keep LSB 7bits of msg_pad, make MSB 1 bit to 0
    AND 0111 1111 with msg_pad 


    //crypt
    LFSR (7bits) XOR msg_pad (7bits) -> crypt (7bits)
    XOR all 7 bits of crypt -> as parity bit (1 bit)
    crypt (7bits) together with parity bit (1 bit) as MSB -> msg_crypt w/ parity 
    Store msg_crypt w/ parity to data_mem[64+i]

    //cal next LFSR
    AND LFSR (7bits) with LFSR pattern (7bits) -> result1
    XOR all bits of result1 -> LSB bit of next LFSR (as feedback value, 1 bit)
    LEFT SHIFT 1 bits of LFSR -> LS result (6bits)
    LS result (6bits) together with feedback -> next LFSR (7bits) //actual use OR
    LFSR (7bits) <= next LFSR (7bits)
}


